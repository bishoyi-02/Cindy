# -*- coding: utf-8 -*-
"""chatbot_BOW_NN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15UDZU00Ne__1GU1QFKRmQtb2Hv_wVUQF
"""

import json
import string
import random
import joblib
import nltk
import marshal
import dill as pickle
import numpy as np
from nltk.stem import WordNetLemmatizer
import tensorflow as tensorF
from tensorflow.keras import Sequential 
from tensorflow.keras.layers import Dense, Dropout

nltk.download("punkt")
nltk.download("wordnet")

nltk.download('omw-1.4')

data = {"intents":
[
            {
             "tag":"greetings",
             "patterns": ["hello","hey","hi","good day","greetings","what's up?","how is it going"],
             "responses":["hello","hey!","what can i do for you?"]
            },
            {
             "tag":"goodbye",
             "patterns": ["cya","see you later","goodbye","good day","bye","ciao","see you"],
             "responses":["have a nice day","goodbye"]
            },
            {
             "tag":"age",
             "patterns": ["how old","what is your age","age?"],
             "responses":["I get reborn after every compilation","hey!","my owners are averagely 20 years!"]
            },
            {
             "tag":"name",
             "patterns": ["name","what should call you","who","tell me your name"],
             "responses":["you can call me Medbot!","i am Medbot!","i am Medbot your medical assistant"]
            },
            {
             "tag":"common cold symptoms",
             "patterns": ["Runny or stuffy nose",
             "Sore throat",
             "Cough",
             "Congestion",
             "body aches",
             "mild headache",
             "Sneezing",
             "fever",
             "Generally feeling unwell (malaise)"],
             "responses":["It seems that you are suffering from common cold"]
            },
            {
             "tag":"fever symptoms",
             "patterns":["Sweating",
             "Chills" ,
             "shivering",
             "Headache",
             "Muscle aches",
             "Loss of appetite",
             "Irritability",
             "Dehydration",
             "General weakness"],
             "responses":["It seems that you are suffering from fever"]
            },
            {
             "tag":"Diabetes symptoms",
             "patterns":["increased hunger",
             "increased thirst",
             "weight loss",
             "frequent urination",
             "blurry vision",
             "extreme fatigue"],
             "responses":["It seems that you are suffering from Diabetes"]
            },
            {
             "tag":"Depression symptoms",
             "patterns":["Hopeless outlook",
             "Lost interest",
             "Increased fatigue",
             "sleep problem",
             "Anxiety",
             "change weight",
             "Looking death"],
             "responses":["It seem that you are suffering from depression"]
            },
            {
             "tag":"Asthma symptoms",
             "patterns":["coughing",
             "cough",
             "tightness chest",
             "shortness breath",
             "difficulty talking",
             "panic",
             "fatigue"],
             "responses":["It seem that you are suffering from Asthma"]
            },
            {
              "tag":"heart disease",
              "patterns":["chest pain","short breathing","swelling  legs","swelling arms","heart attack"],
              "responses":["Looks like you have got a heart disease. I recommend you to check our Heart Disease Predictor"]
            },
            {
             "tag":"common cold prevention",
             "patterns":["medicines common cold","prevention method common cold","eat drink common cold","How can I keep from getting a cold or the flu?"],
             "responses":["medicines you can consume : Dextromethorphan,Decongestant,Diphenhydramine,Crocin Cold & Flu Max, preventions that you must follow :Wash your hands,Avoid touching your face,Clean frequently used surfaces,Use hand sanitizers,SUGGESTED FOODS ARE:Garlic,Vitamin C–containing fruits,Leafy greens,Broccoli,Oatmeal,Spices,Chicken Soup"]
            },
            {
             "tag":"fever prevention",
             "patterns":["medicines fever","prevention fever","eat or drink fever","How can I keep from getting a fever?"],
             "responses":["medicines you can consume : acetaminophen ,ibuprofen,aspirin,Crocin Cold & Flu Max, prevention that you must follow :Wash your hands,Cover your mouth when you cough and your nose when you sneeze,Clean frequently used surfaces,Avoid sharing cups, glasses, and eating utensils with other people.,SUGGESTED FOODS ARE:Garlic,Vitamin C–containing fruits,Leafy greens,Broccoli,Oatmeal,Spices,Chicken Soup"]
            },
            {
             "tag":"diabetes prevention",
             "patterns":["medicines diabetes","prevention diabetes","eat or drink  diabetes","How can I keep from getting diabetes?"],
             "responses":["medicines you can consume : Insulin ,Amylinomimetic drug,Dipeptidyl peptidase-4 (DPP-4) inhibitor, prevention that you must follow :Cut Sugar and Refined Carbs From Your Diet,Work Out Regularly,Drink Water as Your Primary Beverage,Lose Weight If You’re Overweight or Obese,Quit Smoking, Follow a Very-Low-Carb Diet,Watch Portion Sizes,SUGGESTED FOODS ARE:Leafy greens,Avocados,Eggs"]
            },
 
            {
             "tag":"depression prevention",
             "patterns":["medicines depression","prevention depression","eat or drink depression","How can I keep from getting depression?"],
             "responses":["medicines you can consume :  brexpiprazole, quetiapine,olanzapine, prevention that you must follow :Exercise regularly,Cut back on social media time,Drink Water as Your Primary Beverage,Build strong relationships,Minimize your daily choices, Follow a Very-Low-Carb Diet,SUGGESTED FOODS ARE:Get Enough Vitamin D,Include Omega-3 Fatty Acids,Beans and legumes"]
            },
            {
             "tag":"asthma prevention",
             "patterns":["medicines asthma"," prevention asthma","eat or drink asthma","How can I keep from getting asthma?"],
             "responses":["medicines you can consume : epinephrine,anticholinergic,Proair HFA, prevention that you must follow : Identify Asthma Triggers, Stay Away From Allergens,Avoid Smoke of Any Type,SUGGESTED FOODS ARE:carrots,juice,eggs,broccoli,cantaloupe,milk"]
            },
            {
             "tag":"Consultation",
             "patterns": ["consultation","doctor available","doctor consultations","meeting doctor","doctor help "],
             "responses":["You can contact various doctors here for any kind of consultation: 1. https://www.1mg.com/online-doctor-consultation, 2. https://www.tatahealth.com/online-doctor-consultation/general-physician, 3. https://www.doconline.com/, or you can pay a visit to your local area doctor or family doctor."]
            }
]}

lm = WordNetLemmatizer()
ourClasses=[]
newWords=[]
docPattern=[]
docTag=[]

for intent in data['intents']:
    for pattern in intent['patterns']:
        ourNewTokens = nltk.word_tokenize(pattern)
        newWords.extend(ourNewTokens)
        docPattern.append(pattern)
        docTag.append(intent['tag'])
    if intent['tag'] not in ourClasses:
        ourClasses.append(intent['tag'])
# print(newWords)       
newWords = [lm.lemmatize(word.lower()) for word in newWords if word not in string.punctuation]
# print(newWords)
newWords = sorted(set(newWords))
# print(ourClasses)
ourClasses=sorted(set(ourClasses))

print(len(ourClasses))

print(newWords)

print(docPattern)

print(docTag)

trainingData = []
outEmpty=[0]*len(ourClasses)

for i,doc in enumerate(docPattern):
  bagOfWords=[]
  text=lm.lemmatize(doc.lower())
  # print(text)
  for word in newWords:
    bagOfWords.append(1) if word in text else bagOfWords.append(0)
  outputRow = list(outEmpty)
  # print(bagOfWords)
  
  outputRow[ourClasses.index(docTag[i])]=1
  # print(outputRow)
  trainingData.append([bagOfWords,outputRow])

random.shuffle(trainingData)
trainingData = np.array(trainingData,dtype=object)

x = np.array(list(trainingData[:, 0]))
y = np.array(list(trainingData[:, 1]))

print(x)

print(y)

iShape = (len(x[0]),)
oShape = len(y[0])

ourNewModel =Sequential()
ourNewModel.add(Dense(128,input_shape=iShape,activation='relu'))
ourNewModel.add(Dropout(0.5))
ourNewModel.add(Dense(64,activation="relu"))
ourNewModel.add(Dropout(0.3))
ourNewModel.add(Dense(oShape,activation='softmax'))
md = tensorF.keras.optimizers.Adam(learning_rate=0.01,decay=1e-6)
ourNewModel.compile(loss='categorical_crossentropy',
                    optimizer=md,
                    metrics=['accuracy'])
print(ourNewModel.summary())
ourNewModel.fit(x,y,epochs=200,verbose=1)
print("Done Training")


def ourText(text):
  newTokens = nltk.word_tokenize(text)
  newTokens = [lm.lemmatize(word) for word in newTokens]
  return newTokens

def wordBag(text, vocab):
  newTokens = ourText(text)
  bagOfWords = [0]*len(vocab)
  for w in newTokens:
    for i,word in enumerate(vocab):
      if word ==w:
        bagOfWords[i]=1
  return np.array(bagOfWords)

def PClass(text,vocab,labels):
  bagOfWords = wordBag(text,vocab)
  ourResult = ourNewModel.predict(np.array([bagOfWords]))[0]
  newThresh=0.2
  yp = [[i,res]for i,res in enumerate(ourResult) if res>newThresh]
  print(ourResult)
  print(yp)
  yp.sort(key=lambda x:x[1],reverse=True)
  newList=[]
  for r in yp:
    newList.append(labels[r[0]])
  return newList  


def getRes(firstList,fJson):
  tag = firstList[0]
  listOfIntents = fJson['intents']
  for i in listOfIntents:
    if i['tag']==tag:
      ourResult= random.choice(i['responses'])
      break
  return ourResult


print("Pickling starts")


with open('PClass.pkl', 'wb') as file:
  pickle.dump(PClass,file)

with open('getRes.pkl', 'wb') as file:
  pickle.dump(getRes,file)

with open('newWords.pkl', 'wb') as file:
  pickle.dump(newWords,file)


with open('ourClasses.pkl', 'wb') as file:
  pickle.dump(ourClasses,file)

with open('data.pkl', 'wb') as file:
  pickle.dump(data,file)

with open('wordBag.pkl', 'wb') as file:
  pickle.dump(wordBag,file)

with open('ourText.pkl', 'wb') as file:
  pickle.dump(ourText,file)

ourNewModel.save('ourNewModel.h5')

getRes_pkl=pickle.dumps(getRes)
newWords_pkl=pickle.dumps(newWords) 
ourClasses_pkl=pickle.dumps(ourClasses) 
data_pkl=pickle.dumps(data) 
print("Pickling ends")
# while True:
#   newMessage = input("")
#   intents = PClass(newMessage,newWords,ourClasses)
#   ourResult = getRes(intents,data)
#   print(ourResult)